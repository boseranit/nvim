#########
# Options
#########
# b beginning of a line
# i in-word expansion (can expand within a word)
# w word boundary (cannot expand within a word)
# r regular expression
# A automatic expansion (trigger key not needed)

##############################
#   Loops and if statements  #
##############################

snippet for "for loop" b
for (int ${1:i}=${2:0}; $1<${3:n}; ++$1) {
    $0
}
endsnippet

snippet rfor "reverse for loop" b
for (int ${1:i}=${2:n-1}; $1>${3:-1}; --$1) {
    $0
}
endsnippet

snippet while "while loop" b
while ($1) {
    $2
}
$0
endsnippet

snippet if "if statement" b
if ($1) {
    $2
} $0
endsnippet

snippet elif "else if statement" w
else if ($1) {
    $2
} $0
endsnippet

snippet else "else statement" w
else ($1) {
    $2
} $0
endsnippet

######################
#   Data structures  #
######################

snippet ll "long long" i
long long
endsnippet

snippet vi "vector int" w
vector<int>
endsnippet

snippet vvi "vector vector int" w
vetcor<vector<int>>
endsnippet

snippet vll "vector long long" w
vector<long long>
endsnippet

snippet vb "vector bool" w
vector<bool>
endsnippet

snippet pii "pair int int" w
pair<int,int>
endsnippet

snippet piii "tuple int int int" w
tuple<int,int,int>
endsnippet

snippet vpii "vector pair int int" w
vector<pair<int,int>>
endsnippet

snippet pb "vector push_back" i
push_back($1);$0
endsnippet

###########
#   Misc  #
###########

snippet sort "sort ordered data" b
sort($1.begin(), $1.end());$0
endsnippet

snippet lb "binary search geq" w
lower_bound($1.begin(), $1.end(), $2);$0
endsnippet

snippet ub "binary search >" w
upper_bound($1.begin(), $1.end(), $2);$0
endsnippet

snippet rev "greater comparator" i
greater<${1:int}>()$0
endsnippet

snippet nn "cout newline character" w
<< '\n';
endsnippet

snippet sp "cout space character" w
<< ' ';
endsnippet
